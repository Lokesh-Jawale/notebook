[{"/home/lokesh/Documents/Web dev/Notebook/notebook/src/index.js":"1","/home/lokesh/Documents/Web dev/Notebook/notebook/src/App.js":"2","/home/lokesh/Documents/Web dev/Notebook/notebook/src/serviceWorker.js":"3","/home/lokesh/Documents/Web dev/Notebook/notebook/src/app/store.js":"4","/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js":"5","/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Subject.js":"6","/home/lokesh/Documents/Web dev/Notebook/notebook/src/features/notesSlice.js":"7","/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Topic.js":"8","/home/lokesh/Documents/Web dev/Notebook/notebook/src/firebase.js":"9"},{"size":674,"mtime":1629720282055,"results":"10","hashOfConfig":"11"},{"size":1608,"mtime":1629865179574,"results":"12","hashOfConfig":"11"},{"size":5014,"mtime":1629687125309,"results":"13","hashOfConfig":"11"},{"size":197,"mtime":1629711471261,"results":"14","hashOfConfig":"11"},{"size":3043,"mtime":1629866013212,"results":"15","hashOfConfig":"11"},{"size":7582,"mtime":1629864349487,"results":"16","hashOfConfig":"11"},{"size":2584,"mtime":1629864396596,"results":"17","hashOfConfig":"11"},{"size":7194,"mtime":1629864130732,"results":"18","hashOfConfig":"11"},{"size":559,"mtime":1629741354499,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"z7abj",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/lokesh/Documents/Web dev/Notebook/notebook/src/index.js",[],["41","42"],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/App.js",[],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/serviceWorker.js",[],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/app/store.js",[],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js",["43"],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Subject.js",["44"],"import './Subject.css';\nimport React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { green } from '@material-ui/core/colors';\nimport {db} from '../firebase.js';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveSubject, deleteSubject, selectCurrentSubject,  setCurrentSubject } from '../features/notesSlice';\nimport { selectSubjectsList, emptyTopicsList } from '../features/notesSlice';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    maxWidth: 200,\n  },\n}));\n\nfunction Subject() {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [subject, setSubject] = useState('');\n    const dispatch = useDispatch();\n    const subjectsList = useSelector(selectSubjectsList);\n    const currentSubject = useSelector(selectCurrentSubject);\n\n    useEffect(() => {\n        // Fetching realtime (Subjects document) data from database\n        db.collection(\"notebooks\")\n            .onSnapshot((querySnapshot) => {\n                querySnapshot.forEach((doc) => {\n                    // console.log(doc.id, \" \", doc.data());\n                    dispatch(saveSubject(doc.id));\n                });\n            });\n    }, [])\n\n    const handleChange = (event) => {\n        setSubject(event.target.value);\n        if(event.target.value?.length > 0){\n            dispatch(setCurrentSubject(event.target.value));\n            dispatch(emptyTopicsList([]));\n        }\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleCloseAdd = () => {\n        // Adding New Subject to database\n        if(subject?.length > 0 && currentSubject!== subject){\n            db.collection(\"notebooks\")\n                .doc(subject)\n                .set({});\n            dispatch(setCurrentSubject(subject));\n        }\n        setOpen(false);\n    };\n\n    const handleCloseEdit = () => {\n        let position = subjectsList.indexOf(subject);\n        if(subject?.length > 0 && position === -1){\n            // console.log(\"UPDating \", subject);\n            var temp = currentSubject;\n            var tempSub = subject;\n\n            // adding edited subject to the database\n            db.collection(\"notebooks\").doc(subject).set({});\n\n            // Adding data of old subject name to edited subject name document\n            db.collection(\"notebooks\").doc(temp)\n                .collection(\"topics\")\n                .get().then((querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        console.log(\"Adding data \",doc.id, \" => \", doc.data());\n                        db.collection(\"notebooks\").doc(tempSub)\n                            .collection(\"topics\")\n                            .doc(doc.id).set({note: doc.data().note});\n                    });\n                });\n            \n            // deleting data of old subject document from database\n            db.collection(\"notebooks\").doc(temp)\n                .collection(\"topics\")\n                .get().then((querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        console.log(\"Deleting \", doc.id, \" => \", doc.data());\n                        db.collection(\"notebooks\").doc(temp)\n                            .collection(\"topics\")\n                            .doc(doc.id)\n                            .delete();\n                    });\n\n                    // saving the current subject and deleting the \n                    // old subject document from database\n                    dispatch(saveSubject(tempSub));\n                    dispatch(setCurrentSubject(tempSub));\n                    db.collection(\"notebooks\").doc(temp).delete();\n                    dispatch(deleteSubject(temp));\n                    // console.log(\"At end current subject is \", currentSubject);\n                });\n\n        }\n        if(position !== -1){\n            alert(subject + \" subject already exists. Choose different name\");\n        }\n        dispatch(setCurrentSubject(subject));\n        setOpen(false);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const deleteCurrentSubject = () => {\n        // function to delete current subject\n        if(currentSubject?.length > 0){\n            db.collection(\"notebooks\").doc(currentSubject).delete();\n            dispatch(deleteSubject(currentSubject));\n        }\n    }\n\n  return (\n    <div className=\"subject\">\n        \n        {/* Subject selection, adding, editing, deletion form */}\n        <div className=\"subject__form\">\n\n            <FormControl variant=\"filled\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Add Subject</InputLabel>\n                <Select\n                    value={currentSubject}\n                    onChange={handleChange}\n                >\n                    {subjectsList.map(item => (\n                        (subjectsList?.length > 0) \n                        ? <MenuItem style={{overflowX: \"auto\"}} value={item}>{item}</MenuItem>\n                        : <MenuItem value=\"\"><em>None</em></MenuItem>\n                    ))}\n                    \n                </Select>\n            </FormControl>\n\n            <div className= \"subject__buttons\">\n                <IconButton className=\"subject__addButton\" onClick={handleClickOpen}>\n                    <AddBoxIcon style={{ color: green[500] }} fontSize=\"medium\" />\n                </IconButton>\n\n                <IconButton className=\"subject__editButton\" onClick={handleClickOpen}>\n                    <EditIcon color=\"primary\" fontSize=\"medium\" />\n                </IconButton>\n\n                <IconButton className=\"subject__deleteButton\" onClick={deleteCurrentSubject}>\n                    <DeleteIcon color=\"secondary\" fontSize=\"medium\" />      \n                </IconButton>\n            </div>\n        </div>\n\n\n        {/* Action Dialog Box (For adding or editing) */}\n        <Dialog open={open} onClose={handleClose}>\n            <DialogTitle>Add or Edit a Subject</DialogTitle>\n            <DialogContent>\n                <form className={classes.container}>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"demo-dialog-native\">Subject</InputLabel>\n                        <Input value={subject} onChange={e => setSubject(e.target.value)}/>\n                    </FormControl>\n                </form>\n            </DialogContent>\n\n            <DialogActions>\n                <Button onClick={handleCloseAdd} color=\"primary\">Add</Button>\n                <Button onClick={handleCloseEdit} color=\"primary\">Edit</Button>\n            </DialogActions>\n        </Dialog>\n\n    </div>\n  );\n}\n\nexport default Subject;\n","/home/lokesh/Documents/Web dev/Notebook/notebook/src/features/notesSlice.js",[],"/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Topic.js",["45"],"import './Topic.css';\nimport React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { green } from '@material-ui/core/colors';\nimport {db} from '../firebase.js';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveTopic, deleteTopic,  setCurrentTopic, emptyTopicsList } from '../features/notesSlice';\nimport { selectTopicsList, selectCurrentSubject, selectCurrentTopic } from '../features/notesSlice';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    maxWidth: 200,\n  },\n}));\n\nfunction Topic() {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [topic, setTopic] = useState('');\n    const dispatch = useDispatch();\n    const topicsList = useSelector(selectTopicsList);\n    const currentTopic = useSelector(selectCurrentTopic);\n    const currentSubject = useSelector(selectCurrentSubject);\n\n    var dbRef = db.collection(\"notebooks\");\n\n    useEffect(() => {\n        // Fetching realtime (Topics document) from database\n        if(currentSubject?.length){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .onSnapshot((querySnapshot) => {\n                    if(querySnapshot?.size === 0){\n                        console.log(\"TOPIC LIST EMPTY\");\n                        dispatch(emptyTopicsList([]));\n                    }\n                    else{\n                        querySnapshot.forEach((doc) => {\n                            // console.log(doc.id, \" \", doc.data());\n                            dispatch(saveTopic(doc.id));\n                        });\n                    }\n                });\n        }\n        else dispatch(emptyTopicsList([]));\n    }, [currentSubject]);\n\n    const handleChange = (event) => {\n        setTopic(event.target.value);\n        if(event.target.value?.length > 0){\n            dispatch(setCurrentTopic(event.target.value));\n        }\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleCloseAdd = () => {\n        if(topic?.length && currentSubject?.length && topic !== currentTopic){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .doc(topic)\n                .set({note: \"\"});\n            // dispatch(saveSubject(subject));\n            dispatch(setCurrentTopic(topic));\n        }\n        setOpen(false);\n    };\n\n    const handleCloseEdit = () => {\n        let position = topicsList.indexOf(topic);\n        if(topic?.length > 0 && currentTopic !== topic && position === -1){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .doc(currentTopic).get()\n                .then(function (doc) {\n                    if (doc && doc.exists) {\n                        var data = doc.data();\n                        // deletes the old Subject document\n                        dbRef.doc(currentSubject).collection(\"topics\")\n                            .doc(currentTopic).delete().then(\n                            // saves the data to new Subject document\n                            dispatch(deleteTopic(currentTopic)),\n                            dbRef.doc(currentSubject).collection(\"topics\")\n                                .doc(topic)\n                                .set(data)\n                        );\n                        dispatch(setCurrentTopic(topic));\n                    }\n            });\n        }\n        if(position !== -1){\n            alert(topic + \" topic already exists. Choose different name\");\n        }\n        setOpen(false);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const deleteCurrentTopic = () => {\n        if(currentTopic?.length > 0){\n            // delete the current Topic from database as well as state\n            dbRef.doc(currentSubject).collection(\"topics\")\n            .doc(currentTopic).delete().then(\n                dispatch(deleteTopic(currentTopic))\n            )\n            .catch(error => console.log(error.message));\n        }\n    }\n\n  return (\n    <div className=\"topic\">\n        \n        {/* Topic selection, adding, editing, deletion form */}\n        <div className=\"topic__form\">\n\n            <FormControl variant=\"filled\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Add Topic</InputLabel>\n                <Select\n                    value={currentTopic}\n                    onChange={handleChange}\n                >\n                    {topicsList.map(item => (\n                        (topicsList?.length > 0) \n                        ? <MenuItem style={{overflowX: \"auto\"}} value={item}>{item}</MenuItem>\n                        : <MenuItem value=\"\"><em>None</em></MenuItem>\n                    ))}\n                    \n                </Select>\n            </FormControl>\n\n            <div className=\"topic__buttons\">\n                <IconButton className=\"topic__addButton\" onClick={handleClickOpen}>\n                    <AddBoxIcon style={{ color: green[500] }} fontSize=\"medium\" />\n                </IconButton>\n\n                <IconButton className=\"topic__editButton\" onClick={handleClickOpen}>\n                    <EditIcon color=\"primary\" fontSize=\"medium\" />\n                </IconButton>\n\n                <IconButton className=\"topic__deleteButton\" onClick={deleteCurrentTopic}>\n                    <DeleteIcon color=\"secondary\" fontSize=\"medium\" />      \n                </IconButton>\n            </div>\n        </div>\n\n        {/* Action Dialog Box (For adding or editing) */}\n        <Dialog open={open} onClose={handleClose}>\n            <DialogTitle>Add or Edit a Topic</DialogTitle>\n            <DialogContent>\n                <form className={classes.container}>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor=\"demo-dialog-native\">Topic</InputLabel>\n                        <Input value={topic} onChange={e => setTopic(e.target.value)}/>\n                    </FormControl>\n                </form>\n            </DialogContent>\n\n            <DialogActions>\n                <Button onClick={handleCloseAdd} color=\"primary\">Add</Button>\n                <Button onClick={handleCloseEdit} color=\"primary\">Edit</Button>\n            </DialogActions>\n        </Dialog>\n\n    </div>\n  );\n}\n\nexport default Topic;\n","/home/lokesh/Documents/Web dev/Notebook/notebook/src/firebase.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":35,"column":8,"nodeType":"52","endLine":35,"endColumn":22,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":55,"column":8,"nodeType":"52","endLine":55,"endColumn":10,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":68,"column":8,"nodeType":"52","endLine":68,"endColumn":24,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentSubject', 'dbRef', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["61"],"React Hook useEffect has missing dependencies: 'dbRef' and 'dispatch'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [currentSubject, currentTopic, dbRef, dispatch]",{"range":"69","text":"70"},"Update the dependencies array to be: [dispatch]",{"range":"71","text":"72"},"Update the dependencies array to be: [currentSubject, dbRef, dispatch]",{"range":"73","text":"74"},[1405,1419],"[currentSubject, currentTopic, dbRef, dispatch]",[2077,2079],"[dispatch]",[2575,2591],"[currentSubject, dbRef, dispatch]"]