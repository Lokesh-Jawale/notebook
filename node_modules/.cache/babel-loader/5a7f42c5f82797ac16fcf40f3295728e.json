{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  note: \"\",\n  subjectsList: [],\n  topicsList: [],\n  currentSubject: '',\n  currentTopic: \"\"\n};\nconst notesSlice = createSlice({\n  name: 'notebook',\n  initialState,\n  reducers: {\n    saveSubject: (state, action) => {\n      let position = state.subjectsList.indexOf(action.payload);\n\n      if (position === -1) {\n        state.subjectsList.push(action.payload);\n        console.log(\"Subject (\" + action.payload + \") added successfully\");\n        if (state.currentSubject === '') state.currentSubject = action.payload;\n      }\n    },\n    updateSubjectsList: (state, action) => {\n      let position = state.subjectsList.indexOf(action.payload.old);\n      if (position !== -1) state.subjectsList[position] = action.payload.new;\n      state.currentSubject = action.payload.new;\n      alert(\"Subject name edited successfully\");\n    },\n    deleteSubject: (state, action) => {\n      let position = state.subjectsList.indexOf(action.payload);\n\n      if (position !== -1) {\n        state.subjectsList.splice(position, 1);\n        console.log(\"Subject (\" + action.payload + \") deleted successfully\" + state.subjectsList);\n        state.currentSubject = state.subjectsList[0];\n      }\n    },\n    saveTopic: (state, action) => {\n      let position = state.topicsList.indexOf(action.payload);\n\n      if (position === -1) {\n        state.topicsList.push(action.payload);\n        console.log(action.payload + \" Added\");\n        if (state.currentTopic === '') state.currentTopic = action.payload;\n      }\n    },\n    updateTopicsList: (state, action) => {\n      let position = state.topicsList.indexOf(action.payload.old);\n      if (position !== -1) state.topicsList[position] = action.payload.new;\n      state.currentTopic = action.payload.new; // alert(\"Subject name edited successfully\");\n    },\n    deleteTopic: (state, action) => {\n      let position = state.topicsList.indexOf(action.payload);\n\n      if (position !== -1) {\n        state.topicsList.splice(position, 1);\n        alert(\"Topic (\" + action.payload + \") deleted successfully\");\n        state.currentTopic = state.topicsList[0];\n      }\n    },\n    saveNote: (state, action) => {\n      state.note = action.payload;\n    },\n    setCurrentSubject: (state, action) => {\n      console.log(\"CHANGING SUBJECT ( \", state.currentSubject, \" ) TO \", action.payload);\n      state.currentSubject = action.payload;\n      console.log(\"CHANGED TO \", state.currentSubject);\n    },\n    setCurrentTopic: (state, action) => {\n      state.currentTopic = action.payload;\n    },\n    emptyTopicsList: (state, action) => {\n      console.log(\"TOPICS REMOVED\");\n      state.topicsList = [];\n      state.currentTopic = \"\";\n    }\n  }\n});\nexport const {\n  saveSubject,\n  updateSubjectsList,\n  deleteSubject,\n  saveTopic,\n  updateTopicsList,\n  deleteTopic,\n  saveNote,\n  setCurrentSubject,\n  setCurrentTopic,\n  emptyTopicsList\n} = notesSlice.actions;\nexport const selectSubjectsList = state => state.notebook.subjectsList;\nexport const selectCurrentSubject = state => state.notebook.currentSubject;\nexport const selectTopicsList = state => state.notebook.topicsList;\nexport const selectCurrentTopic = state => state.notebook.currentTopic;\nexport const selectNote = state => state.notebook.note;\nexport default notesSlice.reducer;","map":{"version":3,"sources":["/home/lokesh/Documents/Web dev/Notebook/notebook/src/features/notesSlice.js"],"names":["createSlice","initialState","note","subjectsList","topicsList","currentSubject","currentTopic","notesSlice","name","reducers","saveSubject","state","action","position","indexOf","payload","push","console","log","updateSubjectsList","old","new","alert","deleteSubject","splice","saveTopic","updateTopicsList","deleteTopic","saveNote","setCurrentSubject","setCurrentTopic","emptyTopicsList","actions","selectSubjectsList","notebook","selectCurrentSubject","selectTopicsList","selectCurrentTopic","selectNote","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    note: \"\",\n    subjectsList: [],\n    topicsList: [],\n    currentSubject: '',\n    currentTopic: \"\",\n}\n\nconst notesSlice = createSlice({\n    name: 'notebook',\n    initialState,\n    reducers: {\n        saveSubject: (state, action) => {\n            let position = state.subjectsList.indexOf(action.payload);\n            if(position === -1){\n                state.subjectsList.push(action.payload);\n                console.log(\"Subject (\" + action.payload +\") added successfully\");\n                if(state.currentSubject === '') \n                    state.currentSubject = action.payload;\n            }\n        },\n\n        updateSubjectsList: (state, action) => {\n            let position = state.subjectsList.indexOf(action.payload.old);\n            if(position !== -1) state.subjectsList[position] = action.payload.new;\n            state.currentSubject = action.payload.new;\n            alert(\"Subject name edited successfully\");\n        },\n\n        deleteSubject: (state, action) => {\n            let position = state.subjectsList.indexOf(action.payload);\n            if(position !== -1){\n                state.subjectsList.splice(position, 1);\n                console.log(\"Subject (\" + action.payload +\") deleted successfully\" +state.subjectsList);\n                state.currentSubject = state.subjectsList[0];\n            }\n        },\n\n        saveTopic: (state, action) => {\n            let position = state.topicsList.indexOf(action.payload);\n            if(position === -1){\n                state.topicsList.push(action.payload);\n                console.log(action.payload + \" Added\");\n                if(state.currentTopic === '') \n                    state.currentTopic = action.payload;\n            }\n        },\n\n        updateTopicsList: (state, action) => {\n            let position = state.topicsList.indexOf(action.payload.old);\n            if(position !== -1) state.topicsList[position] = action.payload.new;\n            state.currentTopic = action.payload.new;\n            // alert(\"Subject name edited successfully\");\n        },\n\n        deleteTopic: (state, action) => {\n            let position = state.topicsList.indexOf(action.payload);\n            if(position !== -1){\n                state.topicsList.splice(position, 1);\n                alert(\"Topic (\" + action.payload +\") deleted successfully\");\n                state.currentTopic = state.topicsList[0];\n            }\n        },\n\n        saveNote: (state, action) => {\n            state.note = action.payload;\n        },\n\n        setCurrentSubject: (state, action) => {\n            console.log(\"CHANGING SUBJECT ( \", state.currentSubject,\" ) TO \", action.payload);\n            state.currentSubject = action.payload;\n            console.log(\"CHANGED TO \", state.currentSubject);\n        },\n\n        setCurrentTopic: (state, action) => {\n            state.currentTopic = action.payload;\n        },\n\n        emptyTopicsList: (state, action) => {\n            console.log(\"TOPICS REMOVED\");\n            state.topicsList = [];\n            state.currentTopic = \"\";\n        },\n    }\n});\n\nexport const {\n    saveSubject, updateSubjectsList, deleteSubject, \n    saveTopic, updateTopicsList, deleteTopic, \n    saveNote, setCurrentSubject, setCurrentTopic, \n    emptyTopicsList,\n} = notesSlice.actions\n\nexport const selectSubjectsList = state => state.notebook.subjectsList;\nexport const selectCurrentSubject = state => state.notebook.currentSubject;\nexport const selectTopicsList = state => state.notebook.topicsList;\nexport const selectCurrentTopic = state => state.notebook.currentTopic;\nexport const selectNote = state => state.notebook.note;\n\nexport default notesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}