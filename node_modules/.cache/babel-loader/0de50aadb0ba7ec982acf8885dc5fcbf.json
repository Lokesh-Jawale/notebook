{"ast":null,"code":"var _jsxFileName = \"/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Note.css';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectNote, saveNote } from '../features/notesSlice';\nimport { selectCurrentSubject, selectCurrentTopic } from '../features/notesSlice';\nimport { db } from '../firebase.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Note() {\n  _s();\n\n  const [inputNote, setInputNote] = useState('');\n  const dispatch = useDispatch();\n  const note = useSelector(selectNote);\n  const currentTopic = useSelector(selectCurrentTopic);\n  const currentSubject = useSelector(selectCurrentSubject);\n  var dbRef = db.collection(\"notebooks\");\n  useEffect(() => {\n    if (currentTopic === null || currentTopic === void 0 ? void 0 : currentTopic.length) {\n      dbRef.doc(currentTopic).collection(\"topics\").onSnapshot(querySnapshot => {\n        // if(querySnapshot?.size === 0){\n        //     console.log(\"TOPIC LIST EMPTY\");\n        //     dispatch(emptyTopicsList([]));\n        // }\n        // else{\n        querySnapshot.forEach(doc => {\n          // console.log(doc.id, \" \", doc.data());\n          dispatch(saveNote(doc.data().note));\n        }); // }\n      });\n    } else dispatch(saveNote(\"\"));\n  }, [currentTopic]);\n\n  const addNote = e => {\n    e.preventDefault();\n\n    if ((inputNote === null || inputNote === void 0 ? void 0 : inputNote.length) === 0) {\n      alert(\"Note is empty Please add something\");\n    } else {\n      dispatch(saveNote(inputNote));\n      alert(\"Note added successfully\");\n    }\n\n    setInputNote('');\n  };\n\n  const deleteNote = e => {\n    dispatch(saveNote(\"\"));\n    alert(\"Note deleted successfully\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n      className: \"note__input\",\n      maxRows: 6,\n      \"aria-label\": \"Add notes\",\n      placeholder: \"Add notes ...\",\n      value: inputNote,\n      onChange: e => setInputNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note__button\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: addNote,\n        disabled: false,\n        color: \"primary\",\n        children: \"Add | Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: deleteNote,\n        disabled: !note,\n        color: \"secondary\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Note, \"HAr8jZfXJ81S/lKuev4YW0xGAv0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Note;\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"sources":["/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js"],"names":["React","useState","useEffect","TextareaAutosize","Button","useDispatch","useSelector","selectNote","saveNote","selectCurrentSubject","selectCurrentTopic","db","Note","inputNote","setInputNote","dispatch","note","currentTopic","currentSubject","dbRef","collection","length","doc","onSnapshot","querySnapshot","forEach","data","addNote","e","preventDefault","alert","deleteNote","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Note.css';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectNote, saveNote } from '../features/notesSlice';\nimport { selectCurrentSubject, selectCurrentTopic } from '../features/notesSlice';\nimport {db} from '../firebase.js';\n\nfunction Note() {\n\n    const [inputNote, setInputNote] = useState('');\n    const dispatch = useDispatch();\n    const note = useSelector(selectNote);\n    const currentTopic = useSelector(selectCurrentTopic);\n    const currentSubject = useSelector(selectCurrentSubject);\n\n    var dbRef = db.collection(\"notebooks\");\n\n    useEffect(() => {\n        if(currentTopic?.length){\n            dbRef.doc(currentTopic)\n                .collection(\"topics\")\n                .onSnapshot((querySnapshot) => {\n                    // if(querySnapshot?.size === 0){\n                    //     console.log(\"TOPIC LIST EMPTY\");\n                    //     dispatch(emptyTopicsList([]));\n                    // }\n                    // else{\n                    querySnapshot.forEach((doc) => {\n                        // console.log(doc.id, \" \", doc.data());\n                        dispatch(saveNote(doc.data().note));\n                    });\n                    // }\n                });\n        }\n        else dispatch(saveNote(\"\"));\n    }, [currentTopic]);\n\n    const addNote = (e) => {\n        e.preventDefault();\n        if(inputNote?.length === 0){\n            alert(\"Note is empty Please add something\");\n\n        }\n        else{\n            dispatch(saveNote(inputNote));\n            alert(\"Note added successfully\");\n        }\n        setInputNote('');\n    }\n\n    const deleteNote = (e) => {\n        dispatch(saveNote(\"\"));\n        alert(\"Note deleted successfully\");\n    }\n\n    return (\n        <div className=\"note\">\n            <h2>Notes</h2>\n\n            <p>{note}</p>\n\n            {/* <input  /> */}\n            <TextareaAutosize\n                className=\"note__input\"\n                maxRows={6}\n                aria-label=\"Add notes\"\n                placeholder=\"Add notes ...\"\n                value={inputNote}\n                onChange={e => setInputNote(e.target.value)}\n            />\n    \n            <div className=\"note__button\">\n                <Button variant=\"contained\" onClick={addNote} disabled={false} color=\"primary\">Add | Edit</Button>\n                <Button variant=\"contained\" onClick={deleteNote} disabled={!note} color=\"secondary\">Delete</Button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Note;\n"]},"metadata":{},"sourceType":"module"}