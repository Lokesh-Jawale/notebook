{"ast":null,"code":"var _jsxFileName = \"/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Note.css';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectNote, saveNote } from '../features/notesSlice';\nimport { selectCurrentSubject, selectCurrentTopic } from '../features/notesSlice';\nimport { db } from '../firebase.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Note() {\n  _s();\n\n  const [inputNote, setInputNote] = useState('');\n  const dispatch = useDispatch();\n  const note = useSelector(selectNote);\n  const currentTopic = useSelector(selectCurrentTopic);\n  const currentSubject = useSelector(selectCurrentSubject);\n  var dbRef = db.collection(\"notebooks\");\n  useEffect(() => {\n    // Getting the Notes data of all the topic(docs) from topics collection at one time\n    // from Subjects(doc) => topics(collection) => topic(doc) => note: \"\"\n    // If the Topic changes new notes of that Subject's topic will get fetched\n    if (currentTopic === null || currentTopic === void 0 ? void 0 : currentTopic.length) {\n      dbRef.doc(currentSubject).collection(\"topics\").doc(currentTopic).get().then(doc => {\n        dispatch(saveNote(doc.data().note));\n      }).catch(error => console.log(error.message));\n    } else dispatch(saveNote(\"\"));\n  }, [currentTopic]);\n\n  const addNote = e => {\n    e.preventDefault();\n\n    if ((inputNote === null || inputNote === void 0 ? void 0 : inputNote.length) === 0) {\n      alert(\"Note is empty Please add something\");\n    } else if (currentTopic === null || currentTopic === void 0 ? void 0 : currentTopic.length) {\n      dbRef.doc(currentSubject).collection(\"topics\").doc(currentTopic).set({\n        note: inputNote\n      });\n      dispatch(saveNote(inputNote));\n    }\n\n    setInputNote('');\n  };\n\n  const deleteNote = e => {\n    if (currentTopic === null || currentTopic === void 0 ? void 0 : currentTopic.length) {\n      dbRef.doc(currentSubject).collection(\"topics\").doc(currentTopic).set({});\n      dispatch(saveNote(\"\"));\n      alert(currentTopic + \"'s note deleted successfully\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflow: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        maxRows: 6,\n        children: note\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n      className: \"note__input\",\n      maxRows: 6,\n      \"aria-label\": \"Add notes\",\n      placeholder: \"Add notes ...\",\n      value: inputNote,\n      onChange: e => setInputNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note__button\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: addNote,\n        disabled: false,\n        color: \"primary\",\n        children: \"Add | Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: deleteNote,\n        disabled: !note,\n        color: \"secondary\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Note, \"HAr8jZfXJ81S/lKuev4YW0xGAv0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Note;\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"sources":["/home/lokesh/Documents/Web dev/Notebook/notebook/src/Components/Note.js"],"names":["React","useState","useEffect","TextareaAutosize","Button","useDispatch","useSelector","selectNote","saveNote","selectCurrentSubject","selectCurrentTopic","db","Note","inputNote","setInputNote","dispatch","note","currentTopic","currentSubject","dbRef","collection","length","doc","get","then","data","catch","error","console","log","message","addNote","e","preventDefault","alert","set","deleteNote","overflow","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Note.css';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectNote, saveNote } from '../features/notesSlice';\nimport { selectCurrentSubject, selectCurrentTopic } from '../features/notesSlice';\nimport {db} from '../firebase.js';\n\nfunction Note() {\n\n    const [inputNote, setInputNote] = useState('');\n    const dispatch = useDispatch();\n    const note = useSelector(selectNote);\n    const currentTopic = useSelector(selectCurrentTopic);\n    const currentSubject = useSelector(selectCurrentSubject);\n\n    var dbRef = db.collection(\"notebooks\");\n\n    useEffect(() => {\n        // Getting the Notes data of all the topic(docs) from topics collection at one time\n        // from Subjects(doc) => topics(collection) => topic(doc) => note: \"\"\n        // If the Topic changes new notes of that Subject's topic will get fetched\n        if(currentTopic?.length){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .doc(currentTopic)\n                .get()\n                .then((doc) => {\n                    dispatch(saveNote(doc.data().note));\n                })\n                .catch(error => console.log(error.message));\n        }\n        else dispatch(saveNote(\"\"));\n    }, [currentTopic]);\n\n    const addNote = (e) => {\n        e.preventDefault();\n        if(inputNote?.length === 0){\n            alert(\"Note is empty Please add something\");\n        }\n        else if(currentTopic?.length){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .doc(currentTopic)\n                .set({note: inputNote});\n            dispatch(saveNote(inputNote));\n        }\n        setInputNote('');\n    }\n\n    const deleteNote = (e) => {\n        if(currentTopic?.length){\n            dbRef.doc(currentSubject)\n                .collection(\"topics\")\n                .doc(currentTopic)\n                .set({});\n            dispatch(saveNote(\"\"));\n            alert(currentTopic + \"'s note deleted successfully\");\n        }\n    }\n\n    return (\n        <div className=\"note\">\n            <h2>Notes</h2>\n\n            {/* note text */}\n            <div style={{overflow: \"auto\"}}>\n                <p maxRows={6}>{note}</p>\n            </div>\n\n            {/* Input area of note */}\n            <TextareaAutosize\n                className=\"note__input\"\n                maxRows={6}\n                aria-label=\"Add notes\"\n                placeholder=\"Add notes ...\"\n                value={inputNote}\n                onChange={e => setInputNote(e.target.value)}\n            />\n    \n            <div className=\"note__button\">\n                <Button variant=\"contained\" onClick={addNote} disabled={false} color=\"primary\">Add | Edit</Button>\n                <Button variant=\"contained\" onClick={deleteNote} disabled={!note} color=\"secondary\">Delete</Button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Note;\n"]},"metadata":{},"sourceType":"module"}